
GccApplication29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c8  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015d  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f2  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000194  00000000  00000000  00000b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000eb  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	PORTD=0x00;
  6c:	12 ba       	out	0x12, r1	; 18
	DDRD=0x80;
  6e:	80 e8       	ldi	r24, 0x80	; 128
  70:	81 bb       	out	0x11, r24	; 17
	ASSR=0x00;
  72:	12 bc       	out	0x22, r1	; 34
	TCCR2=0x6C;
  74:	8c e6       	ldi	r24, 0x6C	; 108
  76:	85 bd       	out	0x25, r24	; 37
	TCNT2=0x00;
  78:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
  7a:	13 bc       	out	0x23, r1	; 35
	TIMSK=0x00;
  7c:	19 be       	out	0x39, r1	; 57
  7e:	0c c0       	rjmp	.+24     	; 0x98 <main+0x2c>
	while (1)
	{
		while(OCR2<0xff)
		{
			OCR2=OCR2+0x01;
  80:	83 b5       	in	r24, 0x23	; 35
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	83 bd       	out	0x23, r24	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e9       	ldi	r18, 0x9F	; 159
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
	TCNT2=0x00;
	OCR2=0x00;
	TIMSK=0x00;
	while (1)
	{
		while(OCR2<0xff)
  98:	83 b5       	in	r24, 0x23	; 35
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	89 f7       	brne	.-30     	; 0x80 <main+0x14>
		{
			OCR2=OCR2+0x01;
			_delay_ms(500);
		}
		while(OCR2>0x00)
  9e:	83 b5       	in	r24, 0x23	; 35
  a0:	88 23       	and	r24, r24
  a2:	d1 f3       	breq	.-12     	; 0x98 <main+0x2c>
		{
			OCR2=OCR2-0x01;
  a4:	83 b5       	in	r24, 0x23	; 35
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	83 bd       	out	0x23, r24	; 35
  aa:	2f e9       	ldi	r18, 0x9F	; 159
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
		while(OCR2<0xff)
		{
			OCR2=OCR2+0x01;
			_delay_ms(500);
		}
		while(OCR2>0x00)
  bc:	83 b5       	in	r24, 0x23	; 35
  be:	81 11       	cpse	r24, r1
  c0:	f1 cf       	rjmp	.-30     	; 0xa4 <main+0x38>
  c2:	ea cf       	rjmp	.-44     	; 0x98 <main+0x2c>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
